// Generated by gencpp from file gearfork_common/forklift_diagnostics_msg.msg
// DO NOT EDIT!


#ifndef GEARFORK_COMMON_MESSAGE_FORKLIFT_DIAGNOSTICS_MSG_H
#define GEARFORK_COMMON_MESSAGE_FORKLIFT_DIAGNOSTICS_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gearfork_common
{
template <class ContainerAllocator>
struct forklift_diagnostics_msg_
{
  typedef forklift_diagnostics_msg_<ContainerAllocator> Type;

  forklift_diagnostics_msg_()
    : header()
    , angular_vel(0.0)
    , linear_vel(0.0)
    , kp_dist(0.0)
    , kd_dist(0.0)
    , kp_angle(0.0)
    , kd_angle(0.0)
    , y_offset(0.0)
    , fork_angle(0.0)
    , dist_2_pallet(0.0)
    , docking_stage()  {
    }
  forklift_diagnostics_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angular_vel(0.0)
    , linear_vel(0.0)
    , kp_dist(0.0)
    , kd_dist(0.0)
    , kp_angle(0.0)
    , kd_angle(0.0)
    , y_offset(0.0)
    , fork_angle(0.0)
    , dist_2_pallet(0.0)
    , docking_stage(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _angular_vel_type;
  _angular_vel_type angular_vel;

   typedef double _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef double _kp_dist_type;
  _kp_dist_type kp_dist;

   typedef double _kd_dist_type;
  _kd_dist_type kd_dist;

   typedef double _kp_angle_type;
  _kp_angle_type kp_angle;

   typedef double _kd_angle_type;
  _kd_angle_type kd_angle;

   typedef double _y_offset_type;
  _y_offset_type y_offset;

   typedef double _fork_angle_type;
  _fork_angle_type fork_angle;

   typedef double _dist_2_pallet_type;
  _dist_2_pallet_type dist_2_pallet;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _docking_stage_type;
  _docking_stage_type docking_stage;





  typedef boost::shared_ptr< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> const> ConstPtr;

}; // struct forklift_diagnostics_msg_

typedef ::gearfork_common::forklift_diagnostics_msg_<std::allocator<void> > forklift_diagnostics_msg;

typedef boost::shared_ptr< ::gearfork_common::forklift_diagnostics_msg > forklift_diagnostics_msgPtr;
typedef boost::shared_ptr< ::gearfork_common::forklift_diagnostics_msg const> forklift_diagnostics_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator1> & lhs, const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.angular_vel == rhs.angular_vel &&
    lhs.linear_vel == rhs.linear_vel &&
    lhs.kp_dist == rhs.kp_dist &&
    lhs.kd_dist == rhs.kd_dist &&
    lhs.kp_angle == rhs.kp_angle &&
    lhs.kd_angle == rhs.kd_angle &&
    lhs.y_offset == rhs.y_offset &&
    lhs.fork_angle == rhs.fork_angle &&
    lhs.dist_2_pallet == rhs.dist_2_pallet &&
    lhs.docking_stage == rhs.docking_stage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator1> & lhs, const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gearfork_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34f69d0c65e8101a3a7cfab5eaf6b334";
  }

  static const char* value(const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34f69d0c65e8101aULL;
  static const uint64_t static_value2 = 0x3a7cfab5eaf6b334ULL;
};

template<class ContainerAllocator>
struct DataType< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gearfork_common/forklift_diagnostics_msg";
  }

  static const char* value(const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 angular_vel\n"
"float64 linear_vel\n"
"float64 kp_dist\n"
"float64 kd_dist\n"
"float64 kp_angle\n"
"float64 kd_angle\n"
"float64 y_offset\n"
"float64 fork_angle\n"
"float64 dist_2_pallet\n"
"string docking_stage\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angular_vel);
      stream.next(m.linear_vel);
      stream.next(m.kp_dist);
      stream.next(m.kd_dist);
      stream.next(m.kp_angle);
      stream.next(m.kd_angle);
      stream.next(m.y_offset);
      stream.next(m.fork_angle);
      stream.next(m.dist_2_pallet);
      stream.next(m.docking_stage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct forklift_diagnostics_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gearfork_common::forklift_diagnostics_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angular_vel: ";
    Printer<double>::stream(s, indent + "  ", v.angular_vel);
    s << indent << "linear_vel: ";
    Printer<double>::stream(s, indent + "  ", v.linear_vel);
    s << indent << "kp_dist: ";
    Printer<double>::stream(s, indent + "  ", v.kp_dist);
    s << indent << "kd_dist: ";
    Printer<double>::stream(s, indent + "  ", v.kd_dist);
    s << indent << "kp_angle: ";
    Printer<double>::stream(s, indent + "  ", v.kp_angle);
    s << indent << "kd_angle: ";
    Printer<double>::stream(s, indent + "  ", v.kd_angle);
    s << indent << "y_offset: ";
    Printer<double>::stream(s, indent + "  ", v.y_offset);
    s << indent << "fork_angle: ";
    Printer<double>::stream(s, indent + "  ", v.fork_angle);
    s << indent << "dist_2_pallet: ";
    Printer<double>::stream(s, indent + "  ", v.dist_2_pallet);
    s << indent << "docking_stage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.docking_stage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEARFORK_COMMON_MESSAGE_FORKLIFT_DIAGNOSTICS_MSG_H
