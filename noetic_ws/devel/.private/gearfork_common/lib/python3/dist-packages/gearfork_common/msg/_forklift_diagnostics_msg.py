# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gearfork_common/forklift_diagnostics_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class forklift_diagnostics_msg(genpy.Message):
  _md5sum = "65a0dd5e5edc9836b73daeb41d8cfa46"
  _type = "gearfork_common/forklift_diagnostics_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 angular_vel
float64 linear_vel
float64 kp_dist
float64 kd_dist
float64 kp_angle
float64 kd_angle
float64 y_offset
float64 fork_angle
float64 dist_2_pallet
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','angular_vel','linear_vel','kp_dist','kd_dist','kp_angle','kd_angle','y_offset','fork_angle','dist_2_pallet']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,angular_vel,linear_vel,kp_dist,kd_dist,kp_angle,kd_angle,y_offset,fork_angle,dist_2_pallet

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(forklift_diagnostics_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.angular_vel is None:
        self.angular_vel = 0.
      if self.linear_vel is None:
        self.linear_vel = 0.
      if self.kp_dist is None:
        self.kp_dist = 0.
      if self.kd_dist is None:
        self.kd_dist = 0.
      if self.kp_angle is None:
        self.kp_angle = 0.
      if self.kd_angle is None:
        self.kd_angle = 0.
      if self.y_offset is None:
        self.y_offset = 0.
      if self.fork_angle is None:
        self.fork_angle = 0.
      if self.dist_2_pallet is None:
        self.dist_2_pallet = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.angular_vel = 0.
      self.linear_vel = 0.
      self.kp_dist = 0.
      self.kd_dist = 0.
      self.kp_angle = 0.
      self.kd_angle = 0.
      self.y_offset = 0.
      self.fork_angle = 0.
      self.dist_2_pallet = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.angular_vel, _x.linear_vel, _x.kp_dist, _x.kd_dist, _x.kp_angle, _x.kd_angle, _x.y_offset, _x.fork_angle, _x.dist_2_pallet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.angular_vel, _x.linear_vel, _x.kp_dist, _x.kd_dist, _x.kp_angle, _x.kd_angle, _x.y_offset, _x.fork_angle, _x.dist_2_pallet,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d().pack(_x.angular_vel, _x.linear_vel, _x.kp_dist, _x.kd_dist, _x.kp_angle, _x.kd_angle, _x.y_offset, _x.fork_angle, _x.dist_2_pallet))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.angular_vel, _x.linear_vel, _x.kp_dist, _x.kd_dist, _x.kp_angle, _x.kd_angle, _x.y_offset, _x.fork_angle, _x.dist_2_pallet,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
