//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the path_tracking_pid package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __path_tracking_pid__PIDCONFIG_H__
#define __path_tracking_pid__PIDCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace path_tracking_pid
{
  class PidConfigStatics;

  class PidConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(PidConfig &config, const PidConfig &max, const PidConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const PidConfig &config1, const PidConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, PidConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const PidConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PidConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const PidConfig &config) const = 0;
      virtual void getValue(const PidConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T PidConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T PidConfig::* field;

      virtual void clamp(PidConfig &config, const PidConfig &max, const PidConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const PidConfig &config1, const PidConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, PidConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const PidConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PidConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const PidConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const PidConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, PidConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, PidConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<PidConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(PidConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("l"==(*_i)->name){l = boost::any_cast<double>(val);}
        if("target_x_vel"==(*_i)->name){target_x_vel = boost::any_cast<double>(val);}
        if("target_end_x_vel"==(*_i)->name){target_end_x_vel = boost::any_cast<double>(val);}
        if("target_x_acc"==(*_i)->name){target_x_acc = boost::any_cast<double>(val);}
        if("target_x_decc"==(*_i)->name){target_x_decc = boost::any_cast<double>(val);}
        if("abs_minimum_x_vel"==(*_i)->name){abs_minimum_x_vel = boost::any_cast<double>(val);}
        if("max_error_x_vel"==(*_i)->name){max_error_x_vel = boost::any_cast<double>(val);}
        if("max_x_vel"==(*_i)->name){max_x_vel = boost::any_cast<double>(val);}
        if("max_yaw_vel"==(*_i)->name){max_yaw_vel = boost::any_cast<double>(val);}
        if("max_yaw_acc"==(*_i)->name){max_yaw_acc = boost::any_cast<double>(val);}
        if("min_turning_radius"==(*_i)->name){min_turning_radius = boost::any_cast<double>(val);}
        if("track_base_link"==(*_i)->name){track_base_link = boost::any_cast<bool>(val);}
        if("init_vel_method"==(*_i)->name){init_vel_method = boost::any_cast<int>(val);}
        if("init_vel_max_diff"==(*_i)->name){init_vel_max_diff = boost::any_cast<double>(val);}
        if("Kp_lat"==(*_i)->name){Kp_lat = boost::any_cast<double>(val);}
        if("Ki_lat"==(*_i)->name){Ki_lat = boost::any_cast<double>(val);}
        if("Kd_lat"==(*_i)->name){Kd_lat = boost::any_cast<double>(val);}
        if("Kp_ang"==(*_i)->name){Kp_ang = boost::any_cast<double>(val);}
        if("Ki_ang"==(*_i)->name){Ki_ang = boost::any_cast<double>(val);}
        if("Kd_ang"==(*_i)->name){Kd_ang = boost::any_cast<double>(val);}
        if("lowpass_cutoff"==(*_i)->name){lowpass_cutoff = boost::any_cast<double>(val);}
        if("lowpass_damping"==(*_i)->name){lowpass_damping = boost::any_cast<double>(val);}
        if("feedback_lat"==(*_i)->name){feedback_lat = boost::any_cast<bool>(val);}
        if("feedback_ang"==(*_i)->name){feedback_ang = boost::any_cast<bool>(val);}
        if("feedforward_lat"==(*_i)->name){feedforward_lat = boost::any_cast<bool>(val);}
        if("feedforward_ang"==(*_i)->name){feedforward_ang = boost::any_cast<bool>(val);}
        if("controller_debug_enabled"==(*_i)->name){controller_debug_enabled = boost::any_cast<bool>(val);}
        if("use_mpc"==(*_i)->name){use_mpc = boost::any_cast<bool>(val);}
        if("anti_collision"==(*_i)->name){anti_collision = boost::any_cast<bool>(val);}
      }
    }

    double l;
double target_x_vel;
double target_end_x_vel;
double target_x_acc;
double target_x_decc;
double abs_minimum_x_vel;
double max_error_x_vel;
double max_x_vel;
double max_yaw_vel;
double max_yaw_acc;
double min_turning_radius;
bool track_base_link;
int init_vel_method;
double init_vel_max_diff;
double Kp_lat;
double Ki_lat;
double Kd_lat;
double Kp_ang;
double Ki_ang;
double Kd_ang;
double lowpass_cutoff;
double lowpass_damping;
bool feedback_lat;
bool feedback_ang;
bool feedforward_lat;
bool feedforward_ang;
bool controller_debug_enabled;
bool use_mpc;
bool anti_collision;

    bool state;
    std::string name;

    class MPC_GROUP
{
  public:
    MPC_GROUP()
    {
      state = true;
      name = "mpc_group";
    }

    void setParams(PidConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("mpc_simulation_sample_time"==(*_i)->name){mpc_simulation_sample_time = boost::any_cast<double>(val);}
        if("mpc_max_error_lat"==(*_i)->name){mpc_max_error_lat = boost::any_cast<double>(val);}
        if("mpc_max_fwd_iterations"==(*_i)->name){mpc_max_fwd_iterations = boost::any_cast<int>(val);}
        if("mpc_min_x_vel"==(*_i)->name){mpc_min_x_vel = boost::any_cast<double>(val);}
        if("mpc_max_vel_optimization_iterations"==(*_i)->name){mpc_max_vel_optimization_iterations = boost::any_cast<int>(val);}
      }
    }

    double mpc_simulation_sample_time;
double mpc_max_error_lat;
int mpc_max_fwd_iterations;
double mpc_min_x_vel;
int mpc_max_vel_optimization_iterations;

    bool state;
    std::string name;

    
}mpc_group;

class TRICYCLE
{
  public:
    TRICYCLE()
    {
      state = true;
      name = "Tricycle";
    }

    void setParams(PidConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_steering_angle"==(*_i)->name){max_steering_angle = boost::any_cast<double>(val);}
        if("max_steering_x_vel"==(*_i)->name){max_steering_x_vel = boost::any_cast<double>(val);}
        if("max_steering_x_acc"==(*_i)->name){max_steering_x_acc = boost::any_cast<double>(val);}
        if("max_steering_yaw_vel"==(*_i)->name){max_steering_yaw_vel = boost::any_cast<double>(val);}
        if("max_steering_yaw_acc"==(*_i)->name){max_steering_yaw_acc = boost::any_cast<double>(val);}
      }
    }

    double max_steering_angle;
double max_steering_x_vel;
double max_steering_x_acc;
double max_steering_yaw_vel;
double max_steering_yaw_acc;

    bool state;
    std::string name;

    
}tricycle;

class COLLISION_GROUP
{
  public:
    COLLISION_GROUP()
    {
      state = true;
      name = "collision_group";
    }

    void setParams(PidConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("obstacle_speed_reduction"==(*_i)->name){obstacle_speed_reduction = boost::any_cast<bool>(val);}
        if("collision_look_ahead_length_offset"==(*_i)->name){collision_look_ahead_length_offset = boost::any_cast<double>(val);}
        if("collision_look_ahead_resolution"==(*_i)->name){collision_look_ahead_resolution = boost::any_cast<double>(val);}
      }
    }

    bool obstacle_speed_reduction;
double collision_look_ahead_length_offset;
double collision_look_ahead_resolution;

    bool state;
    std::string name;

    
}collision_group;

}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double l;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double target_x_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double target_end_x_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double target_x_acc;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double target_x_decc;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double abs_minimum_x_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_error_x_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_x_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_yaw_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_yaw_acc;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_turning_radius;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool track_base_link;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int init_vel_method;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double init_vel_max_diff;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Kp_lat;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Ki_lat;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Kd_lat;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Kp_ang;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Ki_ang;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double Kd_ang;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lowpass_cutoff;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double lowpass_damping;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool feedback_lat;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool feedback_ang;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool feedforward_lat;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool feedforward_ang;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool controller_debug_enabled;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_mpc;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool anti_collision;
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double mpc_simulation_sample_time;
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double mpc_max_error_lat;
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      int mpc_max_fwd_iterations;
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double mpc_min_x_vel;
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      int mpc_max_vel_optimization_iterations;
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double max_steering_angle;
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double max_steering_x_vel;
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double max_steering_x_acc;
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double max_steering_yaw_vel;
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double max_steering_yaw_acc;
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      bool obstacle_speed_reduction;
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double collision_look_ahead_length_offset;
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      double collision_look_ahead_resolution;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("PidConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const PidConfig &__max__ = __getMax__();
      const PidConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const PidConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const PidConfig &__getDefault__();
    static const PidConfig &__getMax__();
    static const PidConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const PidConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void PidConfig::ParamDescription<std::string>::clamp(PidConfig &config, const PidConfig &max, const PidConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class PidConfigStatics
  {
    friend class PidConfig;

    PidConfigStatics()
    {
PidConfig::GroupDescription<PidConfig::DEFAULT, PidConfig> Default("Default", "", 0, 0, true, &PidConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.l = -10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.l = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.l = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("l", "double", 0, "Distance between axle and control point", "", &PidConfig::l)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("l", "double", 0, "Distance between axle and control point", "", &PidConfig::l)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.target_x_vel = -10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.target_x_vel = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.target_x_vel = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_vel", "double", 0, "Target forward velocity", "", &PidConfig::target_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_vel", "double", 0, "Target forward velocity", "", &PidConfig::target_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.target_end_x_vel = -10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.target_end_x_vel = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.target_end_x_vel = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_end_x_vel", "double", 0, "Target forward velocity", "", &PidConfig::target_end_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_end_x_vel", "double", 0, "Target forward velocity", "", &PidConfig::target_end_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.target_x_acc = 1e-09;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.target_x_acc = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.target_x_acc = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_acc", "double", 0, "Target forward acceleration", "", &PidConfig::target_x_acc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_acc", "double", 0, "Target forward acceleration", "", &PidConfig::target_x_acc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.target_x_decc = 1e-09;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.target_x_decc = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.target_x_decc = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_decc", "double", 0, "Target forward decceleration", "", &PidConfig::target_x_decc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("target_x_decc", "double", 0, "Target forward decceleration", "", &PidConfig::target_x_decc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.abs_minimum_x_vel = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.abs_minimum_x_vel = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.abs_minimum_x_vel = 0.025;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("abs_minimum_x_vel", "double", 0, "Absolute minimum velocity for reaching target", "", &PidConfig::abs_minimum_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("abs_minimum_x_vel", "double", 0, "Absolute minimum velocity for reaching target", "", &PidConfig::abs_minimum_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_error_x_vel = 1e-09;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_error_x_vel = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_error_x_vel = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_error_x_vel", "double", 0, "Maximum allowed error in forward velocity", "", &PidConfig::max_error_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_error_x_vel", "double", 0, "Maximum allowed error in forward velocity", "", &PidConfig::max_error_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_x_vel = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_x_vel = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_x_vel = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_x_vel", "double", 0, "Maximum x velocity, used for scaling purposes", "", &PidConfig::max_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_x_vel", "double", 0, "Maximum x velocity, used for scaling purposes", "", &PidConfig::max_x_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_yaw_vel = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_yaw_vel = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_yaw_vel = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_yaw_vel", "double", 0, "Maximum yaw velocity", "", &PidConfig::max_yaw_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_yaw_vel", "double", 0, "Maximum yaw velocity", "", &PidConfig::max_yaw_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_yaw_acc = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_yaw_acc = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_yaw_acc = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_yaw_acc", "double", 0, "Maximum yaw acceleration", "", &PidConfig::max_yaw_acc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_yaw_acc", "double", 0, "Maximum yaw acceleration", "", &PidConfig::max_yaw_acc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_turning_radius = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_turning_radius = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_turning_radius = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("min_turning_radius", "double", 0, "Minimum turning radius", "", &PidConfig::min_turning_radius)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("min_turning_radius", "double", 0, "Minimum turning radius", "", &PidConfig::min_turning_radius)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.track_base_link = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.track_base_link = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.track_base_link = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("track_base_link", "bool", 0, "Should the controller track the path using the base_link frame?", "", &PidConfig::track_base_link)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("track_base_link", "bool", 0, "Should the controller track the path using the base_link frame?", "", &PidConfig::track_base_link)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.init_vel_method = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.init_vel_method = 3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.init_vel_method = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("init_vel_method", "int", 0, "Initial velocity method", "{'enum': [{'name': 'Zero', 'type': 'int', 'value': 0, 'srcline': 23, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Always start from zero', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'InternalSetpoint', 'type': 'int', 'value': 1, 'srcline': 24, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Last internal setpoint is new initial setpoint', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Odom', 'type': 'int', 'value': 2, 'srcline': 25, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Start from current odometry value', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Initial velocity method enum'}", &PidConfig::init_vel_method)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("init_vel_method", "int", 0, "Initial velocity method", "{'enum': [{'name': 'Zero', 'type': 'int', 'value': 0, 'srcline': 23, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Always start from zero', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'InternalSetpoint', 'type': 'int', 'value': 1, 'srcline': 24, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Last internal setpoint is new initial setpoint', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'Odom', 'type': 'int', 'value': 2, 'srcline': 25, 'srcfile': '/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg', 'description': 'Start from current odometry value', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Initial velocity method enum'}", &PidConfig::init_vel_method)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.init_vel_max_diff = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.init_vel_max_diff = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.init_vel_max_diff = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("init_vel_max_diff", "double", 0, "Maximum vel-diff allowed when starting a path (-1 to ignore, only active upon 'init_vel_method'==InternalSetpoint)", "", &PidConfig::init_vel_max_diff)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("init_vel_max_diff", "double", 0, "Maximum vel-diff allowed when starting a path (-1 to ignore, only active upon 'init_vel_method'==InternalSetpoint)", "", &PidConfig::init_vel_max_diff)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Kp_lat = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Kp_lat = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Kp_lat = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kp_lat", "double", 0, "Kp Lateral", "", &PidConfig::Kp_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kp_lat", "double", 0, "Kp Lateral", "", &PidConfig::Kp_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Ki_lat = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Ki_lat = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Ki_lat = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Ki_lat", "double", 0, "Ki Lateral", "", &PidConfig::Ki_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Ki_lat", "double", 0, "Ki Lateral", "", &PidConfig::Ki_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Kd_lat = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Kd_lat = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Kd_lat = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kd_lat", "double", 0, "Kd Lateral", "", &PidConfig::Kd_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kd_lat", "double", 0, "Kd Lateral", "", &PidConfig::Kd_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Kp_ang = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Kp_ang = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Kp_ang = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kp_ang", "double", 0, "Kp Angular", "", &PidConfig::Kp_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kp_ang", "double", 0, "Kp Angular", "", &PidConfig::Kp_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Ki_ang = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Ki_ang = 2.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Ki_ang = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Ki_ang", "double", 0, "Ki Angular", "", &PidConfig::Ki_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Ki_ang", "double", 0, "Ki Angular", "", &PidConfig::Ki_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.Kd_ang = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.Kd_ang = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.Kd_ang = 0.3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kd_ang", "double", 0, "Kd Angular", "", &PidConfig::Kd_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("Kd_ang", "double", 0, "Kd Angular", "", &PidConfig::Kd_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lowpass_cutoff = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lowpass_cutoff = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lowpass_cutoff = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("lowpass_cutoff", "double", 0, "Lowpass cutoff (Hz), 0 disables the filter", "", &PidConfig::lowpass_cutoff)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("lowpass_cutoff", "double", 0, "Lowpass cutoff (Hz), 0 disables the filter", "", &PidConfig::lowpass_cutoff)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lowpass_damping = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lowpass_damping = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lowpass_damping = 1.4142135623730951;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("lowpass_damping", "double", 0, "Lowpass damping", "", &PidConfig::lowpass_damping)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("lowpass_damping", "double", 0, "Lowpass damping", "", &PidConfig::lowpass_damping)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.feedback_lat = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.feedback_lat = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.feedback_lat = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedback_lat", "bool", 0, "Enable lateral feedback?", "", &PidConfig::feedback_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedback_lat", "bool", 0, "Enable lateral feedback?", "", &PidConfig::feedback_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.feedback_ang = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.feedback_ang = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.feedback_ang = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedback_ang", "bool", 0, "Enable angular feedback?", "", &PidConfig::feedback_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedback_ang", "bool", 0, "Enable angular feedback?", "", &PidConfig::feedback_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.feedforward_lat = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.feedforward_lat = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.feedforward_lat = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedforward_lat", "bool", 0, "Enable lateral feedforward?", "", &PidConfig::feedforward_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedforward_lat", "bool", 0, "Enable lateral feedforward?", "", &PidConfig::feedforward_lat)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.feedforward_ang = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.feedforward_ang = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.feedforward_ang = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedforward_ang", "bool", 0, "Enable angular feedforward?", "", &PidConfig::feedforward_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("feedforward_ang", "bool", 0, "Enable angular feedforward?", "", &PidConfig::feedforward_ang)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.controller_debug_enabled = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.controller_debug_enabled = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.controller_debug_enabled = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("controller_debug_enabled", "bool", 0, "Debug controller intermediate gains", "", &PidConfig::controller_debug_enabled)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("controller_debug_enabled", "bool", 0, "Debug controller intermediate gains", "", &PidConfig::controller_debug_enabled)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_mpc = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_mpc = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_mpc = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("use_mpc", "bool", 0, "Limit forward velocity based on predictions of the lateral error", "", &PidConfig::use_mpc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("use_mpc", "bool", 0, "Limit forward velocity based on predictions of the lateral error", "", &PidConfig::use_mpc)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.anti_collision = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.anti_collision = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.anti_collision = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("anti_collision", "bool", 0, "Stop on lethal obstacles", "", &PidConfig::anti_collision)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("anti_collision", "bool", 0, "Stop on lethal obstacles", "", &PidConfig::anti_collision)));
PidConfig::GroupDescription<PidConfig::DEFAULT::MPC_GROUP, PidConfig::DEFAULT> mpc_group("mpc_group", "hide", 0, 1, true, &PidConfig::DEFAULT::mpc_group);
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.mpc_simulation_sample_time = 1e-09;
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.mpc_simulation_sample_time = 10.0;
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.mpc_simulation_sample_time = 0.05;
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      mpc_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_simulation_sample_time", "double", 0, "MPC simulation sample time", "", &PidConfig::mpc_simulation_sample_time)));
//#line 50 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_simulation_sample_time", "double", 0, "MPC simulation sample time", "", &PidConfig::mpc_simulation_sample_time)));
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.mpc_max_error_lat = 1e-09;
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.mpc_max_error_lat = 10.0;
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.mpc_max_error_lat = 0.5;
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      mpc_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_max_error_lat", "double", 0, "MPC maximum allowed lateral error", "", &PidConfig::mpc_max_error_lat)));
//#line 51 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_max_error_lat", "double", 0, "MPC maximum allowed lateral error", "", &PidConfig::mpc_max_error_lat)));
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.mpc_max_fwd_iterations = 0;
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.mpc_max_fwd_iterations = 1000000;
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.mpc_max_fwd_iterations = 200;
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      mpc_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("mpc_max_fwd_iterations", "int", 0, "MPC maximum allowed iterations forward in time", "", &PidConfig::mpc_max_fwd_iterations)));
//#line 52 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("mpc_max_fwd_iterations", "int", 0, "MPC maximum allowed iterations forward in time", "", &PidConfig::mpc_max_fwd_iterations)));
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.mpc_min_x_vel = 1e-09;
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.mpc_min_x_vel = 10.0;
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.mpc_min_x_vel = 0.5;
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      mpc_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_min_x_vel", "double", 0, "MPC minimum absolute forward velocity", "", &PidConfig::mpc_min_x_vel)));
//#line 53 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("mpc_min_x_vel", "double", 0, "MPC minimum absolute forward velocity", "", &PidConfig::mpc_min_x_vel)));
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.mpc_max_vel_optimization_iterations = 1;
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.mpc_max_vel_optimization_iterations = 1000;
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.mpc_max_vel_optimization_iterations = 5;
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      mpc_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("mpc_max_vel_optimization_iterations", "int", 0, "MPC maximum allowed velocity optimization iterations", "", &PidConfig::mpc_max_vel_optimization_iterations)));
//#line 54 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<int>("mpc_max_vel_optimization_iterations", "int", 0, "MPC maximum allowed velocity optimization iterations", "", &PidConfig::mpc_max_vel_optimization_iterations)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      mpc_group.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::MPC_GROUP, PidConfig::DEFAULT>(mpc_group)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::MPC_GROUP, PidConfig::DEFAULT>(mpc_group)));
PidConfig::GroupDescription<PidConfig::DEFAULT::TRICYCLE, PidConfig::DEFAULT> Tricycle("Tricycle", "", 0, 2, true, &PidConfig::DEFAULT::tricycle);
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.max_steering_angle = 0.0;
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.max_steering_angle = 3.1416;
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.max_steering_angle = 3.1416;
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      Tricycle.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_angle", "double", 0, "Maximum steering angle for tricycle model", "", &PidConfig::max_steering_angle)));
//#line 57 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_angle", "double", 0, "Maximum steering angle for tricycle model", "", &PidConfig::max_steering_angle)));
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.max_steering_x_vel = 0.0;
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.max_steering_x_vel = 10.0;
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.max_steering_x_vel = 3.0;
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      Tricycle.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_x_vel", "double", 0, "Maximum steering x velocity for tricycle model", "", &PidConfig::max_steering_x_vel)));
//#line 58 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_x_vel", "double", 0, "Maximum steering x velocity for tricycle model", "", &PidConfig::max_steering_x_vel)));
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.max_steering_x_acc = 0.0;
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.max_steering_x_acc = 10.0;
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.max_steering_x_acc = 2.0;
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      Tricycle.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_x_acc", "double", 0, "Maximum steering x acceleration for tricycle model", "", &PidConfig::max_steering_x_acc)));
//#line 59 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_x_acc", "double", 0, "Maximum steering x acceleration for tricycle model", "", &PidConfig::max_steering_x_acc)));
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.max_steering_yaw_vel = 0.0;
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.max_steering_yaw_vel = 10.0;
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.max_steering_yaw_vel = 0.5;
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      Tricycle.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_yaw_vel", "double", 0, "Maximum steering yaw velocity for tricycle model", "", &PidConfig::max_steering_yaw_vel)));
//#line 60 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_yaw_vel", "double", 0, "Maximum steering yaw velocity for tricycle model", "", &PidConfig::max_steering_yaw_vel)));
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.max_steering_yaw_acc = 0.0;
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.max_steering_yaw_acc = 10.0;
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.max_steering_yaw_acc = 0.5;
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      Tricycle.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_yaw_acc", "double", 0, "Maximum steering yaw acceleration for tricycle model", "", &PidConfig::max_steering_yaw_acc)));
//#line 61 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("max_steering_yaw_acc", "double", 0, "Maximum steering yaw acceleration for tricycle model", "", &PidConfig::max_steering_yaw_acc)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Tricycle.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::TRICYCLE, PidConfig::DEFAULT>(Tricycle)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::TRICYCLE, PidConfig::DEFAULT>(Tricycle)));
PidConfig::GroupDescription<PidConfig::DEFAULT::COLLISION_GROUP, PidConfig::DEFAULT> collision_group("collision_group", "hide", 0, 3, true, &PidConfig::DEFAULT::collision_group);
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.obstacle_speed_reduction = 0;
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.obstacle_speed_reduction = 1;
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.obstacle_speed_reduction = 1;
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      collision_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("obstacle_speed_reduction", "bool", 0, "Slow down on near obstacles", "", &PidConfig::obstacle_speed_reduction)));
//#line 65 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<bool>("obstacle_speed_reduction", "bool", 0, "Slow down on near obstacles", "", &PidConfig::obstacle_speed_reduction)));
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.collision_look_ahead_length_offset = 0.0;
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.collision_look_ahead_length_offset = 5.0;
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.collision_look_ahead_length_offset = 1.0;
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      collision_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("collision_look_ahead_length_offset", "double", 0, "Offset in length to project rectangle collision along path", "", &PidConfig::collision_look_ahead_length_offset)));
//#line 66 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("collision_look_ahead_length_offset", "double", 0, "Offset in length to project rectangle collision along path", "", &PidConfig::collision_look_ahead_length_offset)));
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __min__.collision_look_ahead_resolution = 1e-09;
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __max__.collision_look_ahead_resolution = 10.0;
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __default__.collision_look_ahead_resolution = 1.0;
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      collision_group.abstract_parameters.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("collision_look_ahead_resolution", "double", 0, "Spatial resolution to project rectangle collision along path", "", &PidConfig::collision_look_ahead_resolution)));
//#line 67 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      __param_descriptions__.push_back(PidConfig::AbstractParamDescriptionConstPtr(new PidConfig::ParamDescription<double>("collision_look_ahead_resolution", "double", 0, "Spatial resolution to project rectangle collision along path", "", &PidConfig::collision_look_ahead_resolution)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      collision_group.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::COLLISION_GROUP, PidConfig::DEFAULT>(collision_group)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT::COLLISION_GROUP, PidConfig::DEFAULT>(collision_group)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PidConfig::AbstractGroupDescriptionConstPtr(new PidConfig::GroupDescription<PidConfig::DEFAULT, PidConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<PidConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<PidConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<PidConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    PidConfig __max__;
    PidConfig __min__;
    PidConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const PidConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static PidConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &PidConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const PidConfig &PidConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const PidConfig &PidConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const PidConfig &PidConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<PidConfig::AbstractParamDescriptionConstPtr> &PidConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<PidConfig::AbstractGroupDescriptionConstPtr> &PidConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const PidConfigStatics *PidConfig::__get_statics__()
  {
    const static PidConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = PidConfigStatics::get_instance();

    return statics;
  }

//#line 23 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      const int Pid_Zero = 0;
//#line 24 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      const int Pid_InternalSetpoint = 1;
//#line 25 "/home/avinaash/autonomous_forklift/noetic_ws/src/path_tracking_pid/cfg/Pid.cfg"
      const int Pid_Odom = 2;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __PIDRECONFIGURATOR_H__
