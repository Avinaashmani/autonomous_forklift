// Generated by gencpp from file path_tracking_pid/PidDebug.msg
// DO NOT EDIT!


#ifndef PATH_TRACKING_PID_MESSAGE_PIDDEBUG_H
#define PATH_TRACKING_PID_MESSAGE_PIDDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>

namespace path_tracking_pid
{
template <class ContainerAllocator>
struct PidDebug_
{
  typedef PidDebug_<ContainerAllocator> Type;

  PidDebug_()
    : control_error()
    , tracking_error()
    , proportional()
    , integral()
    , derivative()
    , feedforward()
    , steering_angle(0.0)
    , steering_yaw_vel(0.0)
    , steering_x_vel(0.0)  {
    }
  PidDebug_(const ContainerAllocator& _alloc)
    : control_error(_alloc)
    , tracking_error(_alloc)
    , proportional(_alloc)
    , integral(_alloc)
    , derivative(_alloc)
    , feedforward(_alloc)
    , steering_angle(0.0)
    , steering_yaw_vel(0.0)
    , steering_x_vel(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _control_error_type;
  _control_error_type control_error;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _tracking_error_type;
  _tracking_error_type tracking_error;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _proportional_type;
  _proportional_type proportional;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _integral_type;
  _integral_type integral;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _derivative_type;
  _derivative_type derivative;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _feedforward_type;
  _feedforward_type feedforward;

   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef float _steering_yaw_vel_type;
  _steering_yaw_vel_type steering_yaw_vel;

   typedef float _steering_x_vel_type;
  _steering_x_vel_type steering_x_vel;





  typedef boost::shared_ptr< ::path_tracking_pid::PidDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_tracking_pid::PidDebug_<ContainerAllocator> const> ConstPtr;

}; // struct PidDebug_

typedef ::path_tracking_pid::PidDebug_<std::allocator<void> > PidDebug;

typedef boost::shared_ptr< ::path_tracking_pid::PidDebug > PidDebugPtr;
typedef boost::shared_ptr< ::path_tracking_pid::PidDebug const> PidDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_tracking_pid::PidDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_tracking_pid::PidDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_tracking_pid::PidDebug_<ContainerAllocator1> & lhs, const ::path_tracking_pid::PidDebug_<ContainerAllocator2> & rhs)
{
  return lhs.control_error == rhs.control_error &&
    lhs.tracking_error == rhs.tracking_error &&
    lhs.proportional == rhs.proportional &&
    lhs.integral == rhs.integral &&
    lhs.derivative == rhs.derivative &&
    lhs.feedforward == rhs.feedforward &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.steering_yaw_vel == rhs.steering_yaw_vel &&
    lhs.steering_x_vel == rhs.steering_x_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_tracking_pid::PidDebug_<ContainerAllocator1> & lhs, const ::path_tracking_pid::PidDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_tracking_pid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_tracking_pid::PidDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking_pid::PidDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking_pid::PidDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e3a85077871d90d16f8de7c7a3cf074";
  }

  static const char* value(const ::path_tracking_pid::PidDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e3a85077871d90dULL;
  static const uint64_t static_value2 = 0x16f8de7c7a3cf074ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_tracking_pid/PidDebug";
  }

  static const char* value(const ::path_tracking_pid::PidDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Error topic containing the 'control' error on which the PID acts\n"
"geometry_msgs/Twist control_error\n"
"# Error topic containing the 'tracking' error, i.e. the real error between path and tracked link\n"
"geometry_msgs/Twist tracking_error\n"
"# Control values\n"
"geometry_msgs/Twist proportional\n"
"geometry_msgs/Twist integral\n"
"geometry_msgs/Twist derivative\n"
"geometry_msgs/Twist feedforward\n"
"float32 steering_angle\n"
"float32 steering_yaw_vel\n"
"float32 steering_x_vel\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::path_tracking_pid::PidDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.control_error);
      stream.next(m.tracking_error);
      stream.next(m.proportional);
      stream.next(m.integral);
      stream.next(m.derivative);
      stream.next(m.feedforward);
      stream.next(m.steering_angle);
      stream.next(m.steering_yaw_vel);
      stream.next(m.steering_x_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_tracking_pid::PidDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_tracking_pid::PidDebug_<ContainerAllocator>& v)
  {
    s << indent << "control_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.control_error);
    s << indent << "tracking_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.tracking_error);
    s << indent << "proportional: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.proportional);
    s << indent << "integral: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.integral);
    s << indent << "derivative: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.derivative);
    s << indent << "feedforward: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.feedforward);
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "steering_yaw_vel: ";
    Printer<float>::stream(s, indent + "  ", v.steering_yaw_vel);
    s << indent << "steering_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.steering_x_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_TRACKING_PID_MESSAGE_PIDDEBUG_H
