// Generated by gencpp from file path_tracking_pid/PidFeedback.msg
// DO NOT EDIT!


#ifndef PATH_TRACKING_PID_MESSAGE_PIDFEEDBACK_H
#define PATH_TRACKING_PID_MESSAGE_PIDFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_tracking_pid
{
template <class ContainerAllocator>
struct PidFeedback_
{
  typedef PidFeedback_<ContainerAllocator> Type;

  PidFeedback_()
    : eda()
    , progress(0.0)  {
    }
  PidFeedback_(const ContainerAllocator& _alloc)
    : eda()
    , progress(0.0)  {
  (void)_alloc;
    }



   typedef ros::Duration _eda_type;
  _eda_type eda;

   typedef float _progress_type;
  _progress_type progress;





  typedef boost::shared_ptr< ::path_tracking_pid::PidFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_tracking_pid::PidFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PidFeedback_

typedef ::path_tracking_pid::PidFeedback_<std::allocator<void> > PidFeedback;

typedef boost::shared_ptr< ::path_tracking_pid::PidFeedback > PidFeedbackPtr;
typedef boost::shared_ptr< ::path_tracking_pid::PidFeedback const> PidFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_tracking_pid::PidFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_tracking_pid::PidFeedback_<ContainerAllocator1> & lhs, const ::path_tracking_pid::PidFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.eda == rhs.eda &&
    lhs.progress == rhs.progress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_tracking_pid::PidFeedback_<ContainerAllocator1> & lhs, const ::path_tracking_pid::PidFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_tracking_pid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_tracking_pid::PidFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_tracking_pid::PidFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_tracking_pid::PidFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23bc81d441ea26241a36fb6127b9e7e4";
  }

  static const char* value(const ::path_tracking_pid::PidFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23bc81d441ea2624ULL;
  static const uint64_t static_value2 = 0x1a36fb6127b9e7e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_tracking_pid/PidFeedback";
  }

  static const char* value(const ::path_tracking_pid::PidFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duration eda       # Estimated (optimistic) duration remaining\n"
"float32  progress  # Progress in distance of the path traveled\n"
;
  }

  static const char* value(const ::path_tracking_pid::PidFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eda);
      stream.next(m.progress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_tracking_pid::PidFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_tracking_pid::PidFeedback_<ContainerAllocator>& v)
  {
    s << indent << "eda: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.eda);
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_TRACKING_PID_MESSAGE_PIDFEEDBACK_H
